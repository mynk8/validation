[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "validation"
dynamic = ["version"]
description = "Toolkit used for validation of the Packit Service deployment"
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
license-files = { paths = ["LICENSE"] }
keywords = []
authors = [
  { name = "Red Hat", email = "user-cont-team@redhat.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "click",
  "copr",
  "ogr",
  "sentry-sdk",
]

[project.urls]
Issues = "https://github.com/packit/validation/issues"
Source = "https://github.com/packit/validation"

[project.scripts]
validation = "validation.cli:validation"

[tool.hatch.version]
source = "vcs"
raw-options.version_scheme = "post-release"

[tool.hatch.build.targets.wheel]
packages = ["src/validation"]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/validation}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py39"]
line-length = 100
skip-string-normalization = true

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
  "A",      # flake8-builtins
  "ASYNC",  # flake8-async
  "ARG",    # flake8-unused-arguments
  "B",      # flake8-bugbear
  "C",
  "C4",     # flake8-comprehensions
  "COM",    # flake8-commas
  "DTZ",    # flake8-datetimez
  "E",      # pycodestyle Error
  "EM",     # flake8-errmsg
  "F",      # Pyflakes
  "FBT",    # flake8-boolean-trap
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "ISC",    # flake8-implicit-str-concat
  "N",      # pep8-naming
  "PERF",   # Perflint
  "PIE",    # flake8-pie
  "PLC",    # Pylint Convention
  "PLE",    # Pylint Error
  "PLR",    # Pylint Refactor
  "PLW",    # Pylint Warning
  "Q",      # flake8-quotes
  "RET",    # flake8-return
  "RUF",    # Ruff-specific rules
  "S",      # flake8-bandit
  "SIM",    # flake8-simplify
  "T",
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # pycodestyle Warning
  "YTT",    # flake8-2020
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]
allowed-confusables = [
  "«", "»",
  "‹", "›",
]

[tool.ruff.isort]
known-first-party = ["validation"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.pydocstyle]
convention = "google"
